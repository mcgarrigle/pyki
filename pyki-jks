#!/bin/bash

usage() {
  cat <<EOF | sed 's/^  //'
  Usage: 

    To create server key store:
    pyki-jks  --keystore KEYSTORE --password PASSWORD --key KEY --cert CERT CA* ...
    pyki-jks  --keystore www.jks --password inc0rrect --key www.key --cert www.crt ca.crt

    To create CA trust store:
    pyki-jks  --keystore KEYSTORE --password PASSWORD CA* ...
    pyki-jks  --keystore www.jks --password inc0rrect ca.crt
    
EOF
  exit 2
}

require() {
  S=$(eval "echo \$$1")
  if [ -z "${S}" ]; then
    echo "Parameter --${1,,} missing"
    usage
  fi
}

ARGS=$(getopt -a -n pyki-jks -o K:p:k:c: --long keystore:,password:,key:,cert: -- "$@")

ERROR="$?"
if [ "${ERROR}" != "0" ]; then 
    usage
    exit 1
fi

eval set -- "${ARGS}"
while :
do
  case "$1" in
    --keystore) KEYSTORE="$2"; shift 2 ;;
    --password) PASSWORD="$2"; shift 2 ;;
    --key)      KEY="$2";      shift 2 ;;
    --cert)     CERT="$2";     shift 2 ;;
    --)         shift; break ;;
    *) echo "Unexpected option: $1"; exit 1
  esac
done

require KEYSTORE
require PASSWORD

if [ -n "${KEY}" ]; then
  require CERT
fi

if [ -n "${CERT}" ]; then
  require KEY
fi

rm -f "${KEYSTORE}"

KS=$(mktemp /tmp/XXXXXXXXXXX)

if [ -n "$KEY" ]; then
  openssl pkcs12 -export \
    -password "pass:${PASSWORD}" \
    -inkey "${KEY}" \
    -in    "${CERT}" \
    -name "server" \
    -out "${KS}"

  keytool -importkeystore \
    -srckeystore "${KS}" -srcstoretype PKCS12 \
    -srcstorepass "${PASSWORD}" \
    -destkeystore "${KEYSTORE}" -deststoretype JKS \
    -deststorepass "${PASSWORD}" 
fi

N=1
for CA in $@; do
  keytool -import \
    -file "$CA" \
    -alias "ca$N" \
    -keystore "www.jks" \
    -storepass "${PASSWORD}" \
    -noprompt

    (( N = N + 1 ))
done

rm -f "${KS}"

echo
echo '--------------------------------'

keytool -list -keystore "${KEYSTORE}" -storepass "${PASSWORD}"
